#lang scheme
(define (even? x)
  (= (remainder x 2) 0))
(define (fast-expt-iter b n)
  (define (expt b n a)
    (if (= n 1)
     (* a b)
     (if (even? n)
         (expt (* b b) (/ n 2) a)
         (expt b (- n 1) (* a b)))))
  (expt b n 1))

(define (cons a b)
  (* (fast-expt-iter 2 a) (fast-expt-iter 3 b)))
(define (car z)
  (define (divide-2 z n)
    (if (= 0 (remainder z 2))
        (divide-2 (/ z 2) (+ n 1))
        n))
  (divide-2 z 0))
(define (cdr z)
  (define (divide-3 z n)
    (if (= 0 (remainder z 3))
        (divide-3 (/ z 3) (+ n 1))
        n))
  (divide-3 z 0))
(define z (cons 5 6))
(car z)
(cdr z)